{"version":3,"sources":["components/MovieIntro.js","components/Header.js","components/Card.js","components/Container.js","components/Button.js","components/ButtonContainer.js","components/DetailsPage.js","components/sortData.js","components/swapi.js","components/App.js","components/serviceWorker.js","index.js","images/001-lightsaber.svg","images/002-game.svg","images/006-human.svg","images/007-universe.svg","images/002-star-wars.svg"],"names":["MovieIntro","movie","toggleSplash","episode_id","title","opening_crawl","subTitle","text","className","onClick","Header","props","favorites","restoreHomePage","animateButtons","Link","to","Card","toggleFavorite","addFavorite","removeFavorite","id","data","isFavorited","state","setState","includes","this","type","src","favActive","favInactive","alt","name","birth_year","terrain","model","gender","diameter","vehicle_class","height","population","passengers","eye_color","climate","key","React","Component","Container","swData","map","ele","Button","link","img","ButtonContainer","selected","buttons","human","planet","vehicle","DetailsPage","fetchPeopleDetails","url","details","Array","push","filter","value","times","detail","detailsCleaner","sortData","fetchData","category","person","homeworld","species","created","residents","currentMovie","a","fetch","starWarsMovies","json","results","Error","fetchPageData","result","ok","response","page","console","log","then","App","findMovie","randomEpisodeNumber","film","find","catch","err","error","updatePage","categories","fetched","showSplash","newFave","filteredFavorites","fav","favoritesPage","length","cardsContainer","people","planets","vehicles","Route","exact","path","render","Redirect","match","params","specificPerson","specificPlanet","specificVehicle","specificFav","pageNumber","Math","floor","random","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b707bb33.chunk.js","sourcesContent":["import React from 'react'\nimport Crawl from 'react-star-wars-crawl'\nimport './MovieIntro.css'\nimport 'react-star-wars-crawl/lib/index.css'\n\nconst MovieIntro = ({ movie, toggleSplash }) => {\n  const {episode_id, title, opening_crawl} = movie\n\n  const swapEpisodeNum = () => {\n    let epsiodeNumerals = [0, 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']\n    return epsiodeNumerals[episode_id]\n  }\n\n  return (\n    <article>\n      <Crawl\n        title={`Episode ${swapEpisodeNum()}`}\n        subTitle={title}\n        text={opening_crawl}\n      />\n      <button className=\"btn__hide-splash\" onClick={() => toggleSplash()}>Take me in!</button>\n    </article>\n  )\n}\n\nexport default MovieIntro","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Header.scss';\n\nconst Header = (props) => {\n    const { favorites, restoreHomePage, animateButtons } = props;\n\n\n    return (\n        <header>\n            <Link to='/'>\n                <h1 onClick={() => {restoreHomePage()}}>LightSide</h1>\n            </Link>\n            <Link to='/Favorites'>\n                <button className='faveBtn' onClick={() => {animateButtons()}}>View Favorites: {favorites}</button>\n            </Link>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    favorites: PropTypes.array,\n    restoreHomePage: PropTypes.func.isRequired,\n    animateButtons: PropTypes.func.isRequired\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Card.scss'\nimport favInactive from '../images/001-lightsaber.svg';\nimport favActive from '../images/002-game.svg';\n\n\nclass Card extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isFavorited: false\n        }\n    }\n    \n    toggleFavorite = () => {\n        const { addFavorite, removeFavorite, id, data, favorites } = this.props;\n        const { isFavorited } = this.state;\n\n        this.setState({ isFavorited: !isFavorited })\n        if(!isFavorited && !favorites.includes(data)) {\n            addFavorite(data)\n        } else {\n            removeFavorite(id)\n        }\n    }\n\n    componentDidMount()  {\n        const { favorites, data } = this.props;\n\n        if(favorites.includes(data)) {\n            this.setState({ isFavorited: true })\n        }\n    }\n\n    render() {\n        const { data, type } = this.props;\n        \n        return (\n            <article className='card'>\n                <img\n                    onClick={this.toggleFavorite} \n                    src={this.state.isFavorited ? favActive : favInactive} \n                    className='favIcon' alt='' />\n                <h2>{data.name}</h2>\n                <h3>{\n                    (data.birth_year && `Birth Year: ${data.birth_year}` )\n                    || (data.terrain && `Terrain: ${data.terrain}`) \n                    || (data.model && `Model: ${data.model}`)\n                    }</h3>\n                <h3>{\n                    (data.gender && `Gender: ${data.gender}` )\n                    || (data.diameter && `Diameter: ${data.diameter}`)\n                    || (data.vehicle_class && `Class: ${data.vehicle_class}`)\n                    }</h3>\n                <h3>{ \n                    (data.height && `Height: ${data.height}`) \n                    || (data.population && `Population: ${data.population}`)\n                    || (data.passengers && `Passengers: ${data.passengers}`)\n                    || ''}</h3>\n                <h3>{ \n                    (data.eye_color && `Eye Color: ${data.eye_color}` )\n                    || (data.climate && `Climate: ${data.climate}` )\n                    || ''}</h3>\n    \n                <Link className='detailsLink' key={data.name} to={`/${type}/${data.name}`}>More Details</Link>\n            </article>\n        )\n    }\n}\n\nCard.propTypes = {\n    toggleFavorite : PropTypes.func,\n    data: PropTypes.object,\n    addFavorite: PropTypes.func.isRequired,\n    type: PropTypes.string,\n    id: PropTypes.string,\n    favorites: PropTypes.array.isRequired\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\nimport PropTypes from 'prop-types';\n\nimport './Container.scss'\n\n\nconst Container = ({ data, type, favorites, addFavorite, removeFavorite }) => {\n    let swData = data.map(ele => {\n        return <Card \n            key={ele.id}\n            addFavorite={addFavorite}\n            removeFavorite={removeFavorite}\n            favorites={favorites}\n            data={ele} \n            type={type}\n            id={ele.id}\n        />\n    })\n\n\n    return (\n        <section className='cardContainer'>\n            { swData }\n        </section>\n    )\n}\n\nContainer.propTypes = {\n    data: PropTypes.array,\n    type: PropTypes.string,\n    favorites: PropTypes.array.isRequired,\n    \n}\n\nexport default Container;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Button.scss';\n\n\nconst Button = (props) => {\n    const {link, title, img, animateButtons} = props;\n\n    return (\n          <Link to={link}>\n            <button className='selectCategoryBtn' onClick={() => animateButtons()}>\n              <span className='selectCategoryBtnText'>{title}</span>\n              <img className='icon' src={img} alt='' />\n            </button>\n          </Link>\n      )\n}\n\nButton.propTypes = {\n    link: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    animateButtons: PropTypes.func\n}\n\nexport default Button;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nimport './ButtonContainer.scss'\nimport human from '../images/006-human.svg';\nimport planet from '../images/007-universe.svg';\nimport vehicle from '../images/002-star-wars.svg';\n\n\nconst ButtonContainer = ({ selected, animateButtons }) => {\n    let btnData = [\n        {   link: '/people',\n            title: 'People',\n            img: human,\n            animateButtons: {animateButtons},\n            key: 1\n        },\n        {   link: '/planets',\n            title: 'Planets',\n            img: planet,\n            animateButtons: {animateButtons},\n            key: 2\n        },\n        {   link: '/vehicles',\n            title: 'Vehicles',\n            img: vehicle,\n            animateButtons: {animateButtons},\n            key: 3\n        }\n    ];\n\n    const buttons = btnData.map(type => {\n        return <Button \n                animateButtons={animateButtons}\n                link={type.link}\n                title={type.title}\n                img={type.img}\n                key={type.key}\n                />\n    })\n    return (\n        <nav className={selected ? 'clickedContainer' : 'btnContainer' }>\n            { buttons }\n        </nav>\n    )\n\n}\n\nButtonContainer.propTypes = {\n    animateButtons: PropTypes.func\n}\n\nexport default ButtonContainer;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Card.scss'\n\nconst DetailsPage = ({data, type, fetchPeopleDetails}) => {\n  let detailsCleaner = () => {\n    let details = []\n    for(const key in data) {\n      if(data[key] !== Array) {\n        details.push(`${key}: ${data[key]}`) \n      }\n   }\n   return details.filter(value => !value.includes('https://')).filter(times => !times.includes('2014')).map(detail => <h2>{detail}</h2>)\n  }\n\n  if(type=== 'people') {\n    fetchPeopleDetails(data.url)\n  }\n\n  return (\n    <div className=\"card-detail\">\n      <Link to={`/${type}`} className='back-btn'>◀ back</Link>\n      {detailsCleaner()}\n    </div>\n  )\n}\n\nDetailsPage.propTypes = {\n  data: PropTypes.string,\n  type: PropTypes.string\n}\n\nexport default DetailsPage\n","import React from 'react'\n\nconst sortData = (fetchData, category) => {\n  if(category === 'people') {\n    return fetchData.map(person => {\n      return {\n        name: person.name, \n        birth_year: person.birth_year, \n        gender: person.gender, \n        height:person.height,\n        eye_color: person.eye_color,\n        homeworld: person.homeworld,\n        species: person.species,\n        id: person.created,\n        url:person.url\n      }\n    })\n  } else if (category === 'planets') {\n    return fetchData.map(planet => {\n      return {\n        name: planet.name, \n        terrain: planet.terrain,\n        diameter: planet.diameter, \n        population: planet.population, \n        climate: planet.climate,\n        residents: planet.residents,\n        id: planet.created,\n        url: planet.url\n      }\n    })\n  } else if (category === 'vehicles') {\n    return fetchData.map(vehicle => {\n      return {\n        name: vehicle.name,\n        vehicle_class: vehicle.vehicle_class,\n        model: vehicle.model,\n        passengers: vehicle.passengers,\n        id: vehicle.created,\n        url: vehicle.url\n      }\n    })\n  }\n}\n\nexport default sortData\n","import sortData from './sortData'\nimport React from 'react'\n\n  const currentMovie = async () => {\n    try {\n      const starWarsMovies = await fetch(`https://swapi.dev/api/films/`)\n        const results = await starWarsMovies.json()\n      return results\n    } catch (error) {\n      throw Error(error)\n    }\n  }\n  \n  const fetchPageData = async (category) => {\n      const url = `https://swapi.dev/api/${category}/?page=`\n      const result = await fetch(url)\n      if(!result.ok) {\n        throw Error('failed to fetch')\n      }\n      const response = await result.json()\n      const data = await sortData(response.results, category)\n      return data\n  }\n\n  const fetchPeopleDetails = async (page) => {\n    console.log(page)\n    try {\n      let personDetails = {}\n      const result = await fetch(page)\n        .then(response => response.json())\n        return result\n    } catch(error) {\n      throw Error(error)\n    }\n  }\n\n\nexport {currentMovie, fetchPageData, fetchPeopleDetails}","import React, { Component } from 'react'\nimport MovieIntro from './MovieIntro'\nimport Header from './Header'\nimport Container from './Container'\nimport ButtonContainer from './ButtonContainer';\nimport { Route, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport DetailsPage from './DetailsPage'\nimport sortData from './sortData'\nimport {currentMovie, fetchPageData, fetchPeopleDetails} from './swapi'\n\nexport class App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      showSplash: true,\n      selected:false,\n      pageNumber: '',\n      favorites: []\n    }\n  }\n\n  componentDidMount(){\n    let randomEpisodeNumber = Math.floor(Math.random() * (6 - 2 + 1)) + 1\n    this.findMovie(randomEpisodeNumber)\n    this.updatePage()\n  }\n\n  findMovie = (randomEpisodeNumber) => {\n    currentMovie()\n      .then(movie => this.setState({ film: movie.results.find(movie => {\n        return movie.episode_id === randomEpisodeNumber\n      })\n    })) \n      .catch(err => this.setState({error: err}))\n  }\n\n  updatePage = async () => {\n    let categories = ['people', 'planets', 'vehicles']\n    return categories.map(async category => {\n      try {\n        const fetched = await fetchPageData(category)\n          this.setState({[category]: await fetched })\n        } catch (error) {\n          this.setState({error})\n      }\n    })\n  }\n\n  animateButtons = () => {\n    this.setState({ selected:true })\n  }\n\n  restoreHomePage = () => {\n    this.setState({ selected: false})\n  }\n\n  toggleSplash = () => {\n    this.setState({ showSplash: false })\n  }\n\n  addFavorite = (newFave) => {\n    this.setState({ favorites: [...this.state.favorites, newFave]})\n  }\n\n  removeFavorite = (id) => {\n   const filteredFavorites = this.state.favorites.filter(fav => fav.id !== id);\n   this.setState({ favorites: filteredFavorites })\n  }\n\n  favoritesPage = () => {\n    if(this.state.favorites.length) {\n      return  <Container \n      addFavorite={this.addFavorite} \n      removeFavorite={this.removeFavorite}\n      favorites={this.state.favorites} \n      data={this.state.favorites} \n      type={'favorites'}\n    /> \n    } else {\n      return (\n        <div className='noFavesMessage'>\n          <h2>To display, no favorites you have.</h2>\n        </div>\n      )\n    }\n  }\n\n  \n\n\n  cardsContainer = () => {\n    const { people, planets, vehicles, favorites } = this.state;\n\n\n    return (\n      <section className={this.state.selected && 'content-conatiner'}>\n       <Route exact path='/people' render={() => (\n         this.state.selected ?\n          <Container \n            addFavorite={this.addFavorite} \n            removeFavorite={this.removeFavorite}\n            favorites={favorites} \n            data={people} \n            type={'people'} /> : \n          <Redirect to='/' />\n       )} />\n        <Route exact path='/planets' render={() => (\n          this.state.selected ?\n          <Container \n            addFavorite={this.addFavorite} \n            removeFavorite={this.removeFavorite}\n            favorites={favorites} \n            data={planets} \n            type={'planets'} /> :\n            <Redirect to='/' />            \n            )} />\n\n        <Route exact path='/vehicles' render={() => (\n          this.state.selected ?\n          <Container \n              addFavorite={this.addFavorite} \n              removeFavorite={this.removeFavorite}\n              favorites={favorites} \n              data={vehicles} \n              type={'vehicles'} /> :\n              <Redirect to='/' />\n              )}/>\n\n        <Route exact path='/favorites' render={() => (\n          this.state.selected ? \n          this.favoritesPage('/favorites') :\n          <Redirect to='/'/>\n          )} />\n\n        <Route exact path='/people/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificPerson = people.find(person => name === person.name)\n          return (\n            this.state.selected ? specificPerson && <DetailsPage data={specificPerson} fetchPeopleDetails={fetchPeopleDetails} type={'people'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/planets/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificPlanet = planets.find(planet => name === planet.name)\n          return (\n            this.state.selected ? specificPlanet && <DetailsPage data={specificPlanet} type={'planets'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/vehicles/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificVehicle = vehicles.find(vehicle => name === vehicle.name)\n          return (\n            this.state.selected ? specificVehicle && <DetailsPage data={specificVehicle} type={'vehicles'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/favorites/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificFav = favorites.find(fav => name === fav.name)\n          return (\n            this.state.selected ? specificFav && <DetailsPage data={specificFav} type={'favorites'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n      </section>\n    )\n  }\n\n  render() {\n    return (\n      <main className='App'>\n        {!this.state.showSplash && <Header restoreHomePage={this.restoreHomePage} animateButtons={this.animateButtons} favorites={this.state.favorites.length}/>}\n        {this.state.showSplash && this.state.film && <MovieIntro toggleSplash={this.toggleSplash} movie={ this.state.film }/>}\n        <main className= 'clickedMain' >\n        {!this.state.showSplash && <ButtonContainer animateButtons={this.animateButtons} selected={this.state.selected} />}\n        {!this.state.showSplash && this.cardsContainer()}\n        </main>\n      </main>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './components/serviceWorker';\nimport { BrowserRouter } from 'react-browser-router';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/001-lightsaber.7176f8c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-game.be0942c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/006-human.ced68ff8.svg\";","module.exports = __webpack_public_path__ + \"static/media/007-universe.277ddc1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-star-wars.9c3db68b.svg\";"],"sourceRoot":""}