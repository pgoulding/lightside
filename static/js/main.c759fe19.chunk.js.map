{"version":3,"sources":["components/MovieIntro.js","components/Header.js","components/Card.js","components/Container.js","components/Button.js","components/ButtonContainer.js","components/DetailsPage.js","components/sortData.js","components/swapi.js","components/App.js","components/serviceWorker.js","index.js","images/001-lightsaber.svg","images/002-game.svg","images/006-human.svg","images/007-universe.svg","images/002-star-wars.svg"],"names":["MovieIntro","_ref","movie","toggleSplash","episode_id","title","opening_crawl","react_default","a","createElement","lib_default","concat","subTitle","text","className","onClick","Header","props","favorites","restoreHomePage","animateButtons","Link","to","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleFavorite","_this$props","addFavorite","removeFavorite","id","data","isFavorited","state","setState","includes","_this$props2","_this$props3","type","src","favActive","favInactive","alt","name","birth_year","terrain","model","gender","diameter","vehicle_class","height","population","passengers","eye_color","climate","key","React","Component","Container","swData","map","ele","src_components_Card","Button","link","img","ButtonContainer","selected","buttons","human","planet","vehicle","src_components_Button","DetailsPage","fetchPeopleDetails","url","details","Array","push","filter","value","times","detail","detailsCleaner","sortData","fetchData","category","person","homeworld","species","created","residents","currentMovie","asyncToGenerator","regenerator_default","mark","_callee","starWarsMovies","results","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","Error","stop","apply","arguments","fetchPageData","_ref2","_callee2","result","response","_context2","ok","_x","_ref3","_callee3","page","_context3","console","log","then","_x2","App","_Component","findMovie","randomEpisodeNumber","film","find","catch","err","error","updatePage","categories","fetched","t1","defineProperty","t2","t3","t4","t5","t6","showSplash","newFave","toConsumableArray","filteredFavorites","fav","favoritesPage","length","src_components_Container","cardsContainer","_this$state","people","planets","vehicles","Route","exact","path","render","Redirect","match","params","specificPerson","components_DetailsPage","_ref4","specificPlanet","_ref5","specificVehicle","_ref6","specificFav","pageNumber","inherits","createClass","Math","floor","random","src_components_Header","src_components_MovieIntro","src_components_ButtonContainer","Boolean","window","location","hostname","ReactDOM","react_browser_router_lib","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c759fe19.chunk.js","sourcesContent":["import React from 'react'\nimport Crawl from 'react-star-wars-crawl'\nimport './MovieIntro.css'\nimport 'react-star-wars-crawl/lib/index.css'\n\nconst MovieIntro = ({ movie, toggleSplash }) => {\n  const {episode_id, title, opening_crawl} = movie\n\n  const swapEpisodeNum = () => {\n    let epsiodeNumerals = [0, 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']\n    return epsiodeNumerals[episode_id]\n  }\n\n  return (\n    <article>\n      <Crawl\n        title={`Episode ${swapEpisodeNum()}`}\n        subTitle={title}\n        text={opening_crawl}\n      />\n      <button className=\"btn__hide-splash\" onClick={() => toggleSplash()}>Take me in!</button>\n    </article>\n  )\n}\n\nexport default MovieIntro","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Header.scss';\n\nconst Header = (props) => {\n    const { favorites, restoreHomePage, animateButtons } = props;\n\n\n    return (\n        <header>\n            <Link to='/'>\n                <h1 onClick={() => {restoreHomePage()}}>LightSide</h1>\n            </Link>\n            <Link to='/Favorites'>\n                <button className='faveBtn' onClick={() => {animateButtons()}}>View Favorites: {favorites}</button>\n            </Link>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    favorites: PropTypes.array,\n    restoreHomePage: PropTypes.func.isRequired,\n    animateButtons: PropTypes.func.isRequired\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Card.scss'\nimport favInactive from '../images/001-lightsaber.svg';\nimport favActive from '../images/002-game.svg';\n\n\nclass Card extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isFavorited: false\n        }\n    }\n    \n    toggleFavorite = () => {\n        const { addFavorite, removeFavorite, id, data, favorites } = this.props;\n        const { isFavorited } = this.state;\n\n        this.setState({ isFavorited: !isFavorited })\n        if(!isFavorited && !favorites.includes(data)) {\n            addFavorite(data)\n        } else {\n            removeFavorite(id)\n        }\n    }\n\n    componentDidMount()  {\n        const { favorites, data } = this.props;\n\n        if(favorites.includes(data)) {\n            this.setState({ isFavorited: true })\n        }\n    }\n\n    render() {\n        const { data, type } = this.props;\n        \n        return (\n            <article className='card'>\n                <img\n                    onClick={this.toggleFavorite} \n                    src={this.state.isFavorited ? favActive : favInactive} \n                    className='favIcon' alt='' />\n                <h2>{data.name}</h2>\n                <h3>{\n                    (data.birth_year && `Birth Year: ${data.birth_year}` )\n                    || (data.terrain && `Terrain: ${data.terrain}`) \n                    || (data.model && `Model: ${data.model}`)\n                    }</h3>\n                <h3>{\n                    (data.gender && `Gender: ${data.gender}` )\n                    || (data.diameter && `Diameter: ${data.diameter}`)\n                    || (data.vehicle_class && `Class: ${data.vehicle_class}`)\n                    }</h3>\n                <h3>{ \n                    (data.height && `Height: ${data.height}`) \n                    || (data.population && `Population: ${data.population}`)\n                    || (data.passengers && `Passengers: ${data.passengers}`)\n                    || ''}</h3>\n                <h3>{ \n                    (data.eye_color && `Eye Color: ${data.eye_color}` )\n                    || (data.climate && `Climate: ${data.climate}` )\n                    || ''}</h3>\n    \n                <Link className='detailsLink' key={data.name} to={`/${type}/${data.name}`}>More Details</Link>\n            </article>\n        )\n    }\n}\n\nCard.propTypes = {\n    toggleFavorite : PropTypes.func,\n    data: PropTypes.object,\n    addFavorite: PropTypes.func.isRequired,\n    type: PropTypes.string,\n    id: PropTypes.string,\n    favorites: PropTypes.array.isRequired\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\nimport PropTypes from 'prop-types';\n\nimport './Container.scss'\n\n\nconst Container = ({ data, type, favorites, addFavorite, removeFavorite }) => {\n    let swData = data.map(ele => {\n        return <Card \n            key={ele.id}\n            addFavorite={addFavorite}\n            removeFavorite={removeFavorite}\n            favorites={favorites}\n            data={ele} \n            type={type}\n            id={ele.id}\n        />\n    })\n\n\n    return (\n        <section className='cardContainer'>\n            { swData }\n        </section>\n    )\n}\n\nContainer.propTypes = {\n    data: PropTypes.array,\n    type: PropTypes.string,\n    favorites: PropTypes.array.isRequired,\n    \n}\n\nexport default Container;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Button.scss';\n\n\nconst Button = (props) => {\n    const {link, title, img, animateButtons} = props;\n\n    return (\n          <Link to={link}>\n            <button className='selectCategoryBtn' onClick={() => animateButtons()}>\n              <span className='selectCategoryBtnText'>{title}</span>\n              <img className='icon' src={img} alt='' />\n            </button>\n          </Link>\n      )\n}\n\nButton.propTypes = {\n    link: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    animateButtons: PropTypes.func\n}\n\nexport default Button;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nimport './ButtonContainer.scss'\nimport human from '../images/006-human.svg';\nimport planet from '../images/007-universe.svg';\nimport vehicle from '../images/002-star-wars.svg';\n\n\nconst ButtonContainer = ({ selected, animateButtons }) => {\n    let btnData = [\n        {   link: '/people',\n            title: 'People',\n            img: human,\n            animateButtons: {animateButtons},\n            key: 1\n        },\n        {   link: '/planets',\n            title: 'Planets',\n            img: planet,\n            animateButtons: {animateButtons},\n            key: 2\n        },\n        {   link: '/vehicles',\n            title: 'Vehicles',\n            img: vehicle,\n            animateButtons: {animateButtons},\n            key: 3\n        }\n    ];\n\n    const buttons = btnData.map(type => {\n        return <Button \n                animateButtons={animateButtons}\n                link={type.link}\n                title={type.title}\n                img={type.img}\n                key={type.key}\n                />\n    })\n    return (\n        <nav className={selected ? 'clickedContainer' : 'btnContainer' }>\n            { buttons }\n        </nav>\n    )\n\n}\n\nButtonContainer.propTypes = {\n    animateButtons: PropTypes.func\n}\n\nexport default ButtonContainer;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './Card.scss'\n\nconst DetailsPage = ({data, type, fetchPeopleDetails}) => {\n  let detailsCleaner = () => {\n    let details = []\n    for(const key in data) {\n      if(data[key] !== Array) {\n        details.push(`${key}: ${data[key]}`) \n      }\n   }\n   return details.filter(value => !value.includes('https://')).filter(times => !times.includes('2014')).map(detail => <h2>{detail}</h2>)\n  }\n\n  if(type=== 'people') {\n    fetchPeopleDetails(data.url)\n  }\n\n  return (\n    <div className=\"card-detail\">\n      <Link to={`/${type}`} className='back-btn'>◀ back</Link>\n      {detailsCleaner()}\n    </div>\n  )\n}\n\nDetailsPage.propTypes = {\n  data: PropTypes.string,\n  type: PropTypes.string\n}\n\nexport default DetailsPage\n","import React from 'react'\n\nconst sortData = (fetchData, category) => {\n  if(category === 'people') {\n    return fetchData.map(person => {\n      return {\n        name: person.name, \n        birth_year: person.birth_year, \n        gender: person.gender, \n        height:person.height,\n        eye_color: person.eye_color,\n        homeworld: person.homeworld,\n        species: person.species,\n        id: person.created,\n        url:person.url\n      }\n    })\n  } else if (category === 'planets') {\n    return fetchData.map(planet => {\n      return {\n        name: planet.name, \n        terrain: planet.terrain,\n        diameter: planet.diameter, \n        population: planet.population, \n        climate: planet.climate,\n        residents: planet.residents,\n        id: planet.created,\n        url: planet.url\n      }\n    })\n  } else if (category === 'vehicles') {\n    return fetchData.map(vehicle => {\n      return {\n        name: vehicle.name,\n        vehicle_class: vehicle.vehicle_class,\n        model: vehicle.model,\n        passengers: vehicle.passengers,\n        id: vehicle.created,\n        url: vehicle.url\n      }\n    })\n  }\n}\n\nexport default sortData\n","import sortData from './sortData'\nimport React from 'react'\n\n  const currentMovie = async () => {\n    try {\n      const starWarsMovies = await fetch(`https://swapi.co/api/films/`)\n        const results = await starWarsMovies.json()\n      return results\n    } catch (error) {\n      throw Error(error)\n    }\n  }\n  \n  const fetchPageData = async (category) => {\n      const url = `https://swapi.co/api/${category}/?page=`\n      const result = await fetch(url)\n      if(!result.ok) {\n        throw Error('failed to fetch')\n      }\n      const response = await result.json()\n      const data = await sortData(response.results, category)\n      return data\n  }\n\n  const fetchPeopleDetails = async (page) => {\n    console.log(page)\n    try {\n      let personDetails = {}\n      const result = await fetch(page)\n        .then(response => response.json())\n        return result\n    } catch(error) {\n      throw Error(error)\n    }\n  }\n\n\nexport {currentMovie, fetchPageData, fetchPeopleDetails}","import React, { Component } from 'react'\nimport MovieIntro from './MovieIntro'\nimport Header from './Header'\nimport Container from './Container'\nimport ButtonContainer from './ButtonContainer';\nimport { Route, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport DetailsPage from './DetailsPage'\nimport sortData from './sortData'\nimport {currentMovie, fetchPageData, fetchPeopleDetails} from './swapi'\n\nexport class App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      showSplash: true,\n      selected:false,\n      pageNumber: '',\n      favorites: []\n    }\n  }\n\n  componentDidMount(){\n    let randomEpisodeNumber = Math.floor(Math.random() * (6 - 2 + 1)) + 1\n    this.findMovie(randomEpisodeNumber)\n    this.updatePage()\n  }\n\n  findMovie = (randomEpisodeNumber) => {\n    currentMovie()\n      .then(movie => this.setState({ film: movie.results.find(movie => {\n        return movie.episode_id === randomEpisodeNumber\n      })\n    })) \n      .catch(err => this.setState({error: err}))\n  }\n\n  updatePage = async () => {\n    let categories = ['people', 'planets', 'vehicles']\n    return categories.map(async category => {\n      try {\n        const fetched = await fetchPageData(category)\n          this.setState({[category]: await fetched })\n        } catch (error) {\n          this.setState({error})\n      }\n    })\n  }\n\n  animateButtons = () => {\n    this.setState({ selected:true })\n  }\n\n  restoreHomePage = () => {\n    this.setState({ selected: false})\n  }\n\n  toggleSplash = () => {\n    this.setState({ showSplash: false })\n  }\n\n  addFavorite = (newFave) => {\n    this.setState({ favorites: [...this.state.favorites, newFave]})\n  }\n\n  removeFavorite = (id) => {\n   const filteredFavorites = this.state.favorites.filter(fav => fav.id !== id);\n   this.setState({ favorites: filteredFavorites })\n  }\n\n  favoritesPage = () => {\n    if(this.state.favorites.length) {\n      return  <Container \n      addFavorite={this.addFavorite} \n      removeFavorite={this.removeFavorite}\n      favorites={this.state.favorites} \n      data={this.state.favorites} \n      type={'favorites'}\n    /> \n    } else {\n      return (\n        <div className='noFavesMessage'>\n          <h2>To display, no favorites you have.</h2>\n        </div>\n      )\n    }\n  }\n\n  \n\n\n  cardsContainer = () => {\n    const { people, planets, vehicles, favorites } = this.state;\n\n\n    return (\n      <section className={this.state.selected && 'content-conatiner'}>\n       <Route exact path='/people' render={() => (\n         this.state.selected ?\n          <Container \n            addFavorite={this.addFavorite} \n            removeFavorite={this.removeFavorite}\n            favorites={favorites} \n            data={people} \n            type={'people'} /> : \n          <Redirect to='/' />\n       )} />\n        <Route exact path='/planets' render={() => (\n          this.state.selected ?\n          <Container \n            addFavorite={this.addFavorite} \n            removeFavorite={this.removeFavorite}\n            favorites={favorites} \n            data={planets} \n            type={'planets'} /> :\n            <Redirect to='/' />            \n            )} />\n\n        <Route exact path='/vehicles' render={() => (\n          this.state.selected ?\n          <Container \n              addFavorite={this.addFavorite} \n              removeFavorite={this.removeFavorite}\n              favorites={favorites} \n              data={vehicles} \n              type={'vehicles'} /> :\n              <Redirect to='/' />\n              )}/>\n\n        <Route exact path='/favorites' render={() => (\n          this.state.selected ? \n          this.favoritesPage('/favorites') :\n          <Redirect to='/'/>\n          )} />\n\n        <Route exact path='/people/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificPerson = people.find(person => name === person.name)\n          return (\n            this.state.selected ? specificPerson && <DetailsPage data={specificPerson} fetchPeopleDetails={fetchPeopleDetails} type={'people'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/planets/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificPlanet = planets.find(planet => name === planet.name)\n          return (\n            this.state.selected ? specificPlanet && <DetailsPage data={specificPlanet} type={'planets'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/vehicles/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificVehicle = vehicles.find(vehicle => name === vehicle.name)\n          return (\n            this.state.selected ? specificVehicle && <DetailsPage data={specificVehicle} type={'vehicles'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n\n        <Route exact path='/favorites/:name' render={({ match }) => {\n          const { name } = match.params\n          let specificFav = favorites.find(fav => name === fav.name)\n          return (\n            this.state.selected ? specificFav && <DetailsPage data={specificFav} type={'favorites'} key={name} /> :\n            <Redirect to='/'/>)\n        }} />\n      </section>\n    )\n  }\n\n  render() {\n    return (\n      <main className='App'>\n        {!this.state.showSplash && <Header restoreHomePage={this.restoreHomePage} animateButtons={this.animateButtons} favorites={this.state.favorites.length}/>}\n        {this.state.showSplash && this.state.film && <MovieIntro toggleSplash={this.toggleSplash} movie={ this.state.film }/>}\n        <main className= 'clickedMain' >\n        {!this.state.showSplash && <ButtonContainer animateButtons={this.animateButtons} selected={this.state.selected} />}\n        {!this.state.showSplash && this.cardsContainer()}\n        </main>\n      </main>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './components/serviceWorker';\nimport { BrowserRouter } from 'react-browser-router';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/001-lightsaber.7176f8c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-game.be0942c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/006-human.ced68ff8.svg\";","module.exports = __webpack_public_path__ + \"static/media/007-universe.277ddc1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/002-star-wars.9c3db68b.svg\";"],"sourceRoot":""}